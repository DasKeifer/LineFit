/* Copyright (C) 2013 Covenant College Physics Department
 * 
 * This program is free software: you can redistribute it and/or modify it under the terms of the GNU Affero General
 * Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any
 * later version.
 * 
 * This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied
 * warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General License for more details.
 * 
 * You should have received a copy of the GNU Affero General License along with this program. If not, see
 * http://www.gnu.org/licenses/. */

package linefit.FitAlgorithms;


import linefit.DataSet;


/** The Abstract class for the Linear Fit Algorithms that allows the user to select the the fit algorithm during fun
 * time
 * 
 * @author Keith Rice
 * @version 1.0
 * @since 0.98.1 */
public abstract class LinearFitFactory
{
    /** The array of all the linear fit factories that will be included in LineFit. In order for a fit algorithm to show
     * up, it must be in this array. The factory at index 0 in this array is the default fit algorithm for LineFit */
    public final static LinearFitFactory[] fitAlgorithmFactories = { PartialDerivativeMinimizationFactory.getInstance(),
            QuadraticApproximationFactory.getInstance() };

    /** Finds and returns the LinearFtFactory with the given name in the list of algorithm factories in LineFit. if it
     * doesn't find the algorithm with the passed name, it will use the default algorithm position at 0 in the array
     * 
     * @param passedName The name of the algorithm to get in the list of possible linear fit factories
     * @return Returns the Linear fit factory that has the passed name as its toString method or the default factory if
     *         the passed name is not found in the array of fit factories */
    public static LinearFitFactory getAlgorithmWithName(String passedName)
    {
        for (int i = 0; i < fitAlgorithmFactories.length; i++)
        {
            if (fitAlgorithmFactories[i].toString().equalsIgnoreCase(passedName))
            {
                return fitAlgorithmFactories[i];
            }
        }
        return fitAlgorithmFactories[0];
    }

    /** Whether or not the fit algorithm generated by this factory supports fixing the slope of the fit. Set to false by
     * default */
    protected boolean canGeneratedFitsFixSlope = false;
    /** Whether or not the fit algorithm generated by this factory supports fixing the intercept of the fit. Set to
     * false by default */
    protected boolean canGeneratedFitsFixIntercept = false;

    /** Allows the factory method to determine if the fit algorithms created by it allow you to fix the slope
     * 
     * @return Whether or not this fit algorithm allows the user to fix the slope */
    public boolean canFixSlopeForGeneratedFits()
    {
        return canGeneratedFitsFixSlope;
    }

    /** Allows the factory method to determine if the fit algorithms created by it allow you to fix the intercept
     * 
     * @return Whether or not this fit algorithm allows the user to fix the intercept */
    public boolean canFixInterceptForGeneratedFits()
    {
        return canGeneratedFitsFixIntercept;
    }

    /** Creates a new instance of the type of FitAlogritm this is This allows us to generically create the fit algorithm
     * and not have to specify before runtime what kind of linear fit we are using
     * 
     * @param dataSet The DataSet that the new FitStrategy will use for data and fit its line to
     * @return Returns a new LinearFitStrategy that is an instance of whatever the instance this is called on subclass
     *         Algorithm */
    public abstract LinearFitStrategy createNewLinearFitStartegy(DataSet dataSet);
}
